[["index.html", "Applying Network Analysis to Humanities Chapter 1 About this Book", " Applying Network Analysis to Humanities Yann Ryan, Iiro Tihonen 2022-09-26 Chapter 1 About this Book This book is a collection of notebooks intended to supplement the “Applying Network Analysis to Humanities’ course at the University of Helsinki, beginning November 2022. Course page on Studies Service Browse the chapters using the navigation bar on the left. If you’re doing the course, you’ll need to open the interactive notebook versions of these chapters, which contain required weekly exercises. See the chapter 2 for more details on this, and how to submit. "],["week-1-class-1-opening-and-knitting-an-r-markdown-file.html", "Chapter 2 Week 1, class 1: Opening and Knitting an R Markdown File 2.1 Introduction 2.2 What is R Markdown? 2.3 The RStudio Interface for R Markdown 2.4 Saving and Knitting a copy 2.5 RStudio 2.6 Knit the file. 2.7 Download and send it to the course leaders. 2.8 More resources", " Chapter 2 Week 1, class 1: Opening and Knitting an R Markdown File Slides for this week 2.1 Introduction Each week, you will need to complete a short assignment in the form of an edited R markdown notebook. As we haven’t introduced R yet, for this week, your only task is to make a copy of this notebook in your personal folder, ‘knit’ it, and send the resulting file to the course leader. In the following weeks, this is the method you’ll need to use to submit the assignments, so this is an opportunity to familiarise yourself with it, and to iron out any problems. Slightly confusingly, there are two copies of this file you’ll need to work with for this exercise. If you are viewing this as a webpage, you’re looking at the output of the R markdown: a simple HTML document. Keep this page open in a web browser as you work. Soon, you’ll log into the CSC notebooks server, and open a source copy, which is interactive, allowing you to edit and run code. 2.2 What is R Markdown? First things first: what is this R markdown document, and how do you use it? An R Markdown file is a format which can be used to create code notebooks: interactive documents containing text and code. Essentially it is a plain text file with the extension .Rmd. It has three types of content: A YAML header (the text at the top in between two sets of —) R code ‘chunks’ (these are the grey boxes which start and end with ```{r}) Plain text. Text outside the code is treated as ordinary text. 2.3 The RStudio Interface for R Markdown When you open a file with extension .Rmd in R Studio (as you will shortly), it automatically detects it as an R Markdown file, and becomes an editor. This is what it should look like: Two sections are highlighted in the image above, which are the most important parts of the editor you’ll need to be aware of. The first bar contains a few important buttons. The first, a drop-down which currently has ‘Preview’ selected, gives you options to ‘knit’ your document (we’ll return to that later). The second, a small green ‘c’ with a plus sign beside it, allows you to create a new code chunk. The third, another drop-down which currently displays ‘Run’, gives you options to run (or execute) one or more of your code chunks. The second highlighted box, just underneath, allows you to switch between ‘Source’ and ‘Visual’. The default, ‘Source’, shows the original markdown file. ‘Visual’ changes to a visual editor, which allows you to edit the document with a user interface similar to a word processor. This might be useful if you use markdown to write an extended document, for the final project for this course, for example. Now we return to the three components of the markdown document (the header, the code chunks, and the plain text). 2.3.1 YAML Header The YAML header is a special language which configures the R markdown. You won’t need to change this much, but you can specify a title and change some settings relating to how the document is knit. 2.3.2 Code Chunks The code chunks are, naturally, a very important element in the document. When you create a code chunk, using the menu item mentioned above, or by typing X and then ending with another X , a grey box will appear. Any entered in this box will be interpreted as R code. In the top-right corner are three icons. You can run everything in the chunk by pressing the small green triangle, and the results will display directly below the chunk. Doing it for chunk below this text (if you’re looking at the interactive version in CSC notebooks) will run the code 1 + 1, and print the answer directly below. Clicking on the ‘options’ cog, will display some settings you can change: in some instances when making an R markdown document, you might want to hide the code and just display the output, for example. You can use the options here to do that for an individual chunk. 1 + 1 ## [1] 2 2.3.3 Text Editor The third key component is the text editor. The point of an R Markdown document is to combine text (for example, explanations of the method you’ve used, or even an entire article where the chunks generate the figures) and code. The text can be formatted using a simple syntax called Markdown. Markdown is a widely-used web standard which allows you to specify thinks like headings, bullet points, italics and bold text. You can learn the basic syntax here, but here are the most important ones: For the moment, that’s really all you need to know about editing R Markdown itself. We’ll expand on this over the next few weeks, as you become more familiar with R. You can also use the visual editor to format your text. 2.4 Saving and Knitting a copy The second part of this exercise tasks you with logging into the CSC notebooks workspace, loading the R-Studio application, saving and ‘knitting’ the R markdown file to your personal work area. 2.4.1 Log into the CSC notebooks workspace In order to open and run the code for this course, we’ll use the CSC notebooks server. This allows you to log into a pre-made workspace containing all the relevant notebooks for the course. First, login to CSC notebooks. Open https://notebooks-beta.rahtiapp.fi/ and log in, using your CSC account. You’ll see a home screen like this: Next, join the workspace. Click the ‘join workspace’ button at the top-right of the window, and copy and paste in the join code you have been sent by email. Once you’ve done this, click on ‘My Workspaces’ using the left-side menu. You should now see a workspace called ‘Network Analysis for Humanities’, and within this, an RStudio application called ‘Network Analysis Course’. Click the big ‘power’ button on the right to start the session. The application should now open in a new tab. 2.5 RStudio Once the session has loaded, the browser window will display an instance of R-Studio. R Studio is an IDE—an interface for the programming language R. Again, don’t worry too much about the details of this now - you’ll learn how to use it properly over the next few weeks. For now, just concentrate on opening, saving, and knitting the R document. First, you need to find and open the markdown document itself. The bottom-right window pane is displaying the file browser - this is how you can open files in R. Click into the applying-network-analysis-to-humanities folder, and then within that open the notebooks/ folder. Open the file 1-1-introduction.Rmd by clicking on it. It will open in the top left pane, with the editor options we walked through above. The first thing you need to do is move the file to your own workspace. This is a folder called my-work only you can write to, which is persistent for the duration of the course (it will be deleted after that, so make sure you make a copy of anything you want to save). Using the file pane, select the 1-1-introduction.Rmd file by clicking the text box to the left. Next, click the ‘more’ cog just above, and the ‘Copy to’ option. In the pop-up box, navigate to your own folder (click on the Home icon, then you should see it). Add your initials to the filename and click ‘Choose’ to save it. Once you’ve done this, you can close this copy of the file, navigate to your folder using the files pane, and open the new copy. 2.6 Knit the file. The final task is to knit the file. To ‘knit’ a file means that it is turned into an HTML webpage, which will include the text, the code chunks (unless hidden), and all the results of the executed code. Click on the drop-down which currently displays ‘Preview’, above the file you’ve just opened. Select ‘Knit to HTML’. This will run the code, and generate an HTML document in the same folder. 2.7 Download and send it to the course leaders. Download the newly-generated HTML file to your computer by selecting it with the checkbox, then the ‘More’ cog and ‘Export’. The file will be downloaded to your local Downloads folder. 2.8 More resources There are loads of resources out there to learn more about RMarkdown: https://bookdown.org/yihui/rmarkdown/ https://rmarkdown.rstudio.com/articles.html "],["week-1-class-2-introduction-to-r-and-the-tidyverse.html", "Chapter 3 Week 1, Class 2: Introduction to R and the Tidyverse 3.1 Quick introduction to R and the tidyverse 3.2 What and why? 3.3 Using R 3.4 Tidyverse 3.5 Exercise for this week", " Chapter 3 Week 1, Class 2: Introduction to R and the Tidyverse Note: if you’re reading this as part of the ‘Applying Network Analysis to Humanities’ course, you should also move a copy to your ‘my-work’ folder in your CSC notebook Workspace, using the method we learned in the previous class. You can either read the static copy in your browser, or else read it directly in the CSC RStudio application, where you can edit and run the code chunks. There are a number of smaller exercises at the end of the document. Once you’ve completed these, knit the document, and email the HTML file to the course leaders. Again, this was covered in last week’s documentation. 3.1 Quick introduction to R and the tidyverse 3.2 What and why? The format of much of the data you’ll work with in R is not that different to the kind of file you would normally open in a spreadsheet programme - what is known as a dataframe. A dataframe is basically a spreadsheet - it contains rows with observations, and columns with variables. Each row is generally a thing, for want of a better word. A thing that wants to be counted, either by summarising it as a more general thing, or turning it into something else and then counting it, or removing some of the things first and then counting the leftovers. You can do a lot more interesting tasks with a thing in a dataframe. A thing might be a single polygon, in a huge dataframe of polygons or lines, all of which add up to a map, which we can then count, sort, filter and render as an image or even an interactive application. 3.3 Using R 3.3.1 Basic R data types. It is worth understanding the main types of data that you’ll come across, in your environment window. First, you’ll have dataframes. These are the spreadsheet-like objects which you’ll use in most analyses. They have rows and columns. Next are variables. A variable is assigned to a name, and then used for various purposes. You’ll often hear of an item called a vector. A vector is a list of objects of the same type. A vector can be a single column in a dataframe (spreadsheet), which means they are used very often in R to manipulate data. A vector can have different types: for example, a character vector looks like this c(\"apples\", \"bananas\", \"oranges\"). A vector is created with the command c(), with each item in the vector placed between the brackets, and followed by a comma. If your vector is a vector of words, the words need to be in inverted commas or quotation marks. fruit = c(&quot;apples&quot;, &quot;bananas&quot;, &quot;oranges&quot;, &quot;apples&quot;) colour = c(&quot;green&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;red&quot;) amount = c(2,5,10,8) You can create a dataframe using the data.frame() command. You just need to pass the function each of your vectors, which will become your columns. fruit_data = data.frame(fruit, colour, amount, stringsAsFactors = FALSE) Notice above that the third column, the amount, has under it instead of . That’s because R is treating it as a number, rather than a character. This means you can add them up and do all sorts of other mathy type things to them. All the items in a vector are coerced to the same type. So if you try to make a vector with a combination of numbers and strings, the numbers will be converted to strings. I wouldn’t worried too much about that for now. So for example if you create this vector, the numbers will get converted into strings. fruit = c(&quot;apples&quot;, 5, &quot;oranges&quot;, 3) fruit ## [1] &quot;apples&quot; &quot;5&quot; &quot;oranges&quot; &quot;3&quot; 3.4 Tidyverse Most of the work in these notebooks is done using a set of packages developed for R called the ‘tidyverse’. These enhance and improve a large range of R functions, with much nice syntax - and they’re faster too. It’s really a bunch of individual packages for sorting, filtering and plotting data frames. They can be divided into a number of diferent categories. All these functions work in the same way. The first argument is the thing you want to operate on. This is nearly always a data frame. After come other arguments, which are often specific columns, or certain variables you want to do something with. You installed the package in the last notebook. Make sure the library is loaded by running the following in an R chunk in a notebook: library(tidyverse) Here are a couple of the most important ones 3.4.1 select(), pull() select() allows you to select columns. You can use names or numbers to pick the columns, and you can use a - sign to select everything but a given column. Using the fruit data frame we created above: We can select just the fruit and colour columns: select(fruit_data, fruit, colour) ## fruit colour ## 1 apples green ## 2 bananas yellow ## 3 oranges orange ## 4 apples red Select everything but the colour column: select(fruit_data, -colour) ## fruit amount ## 1 apples 2 ## 2 bananas 5 ## 3 oranges 10 ## 4 apples 8 Select the first two columns: select(fruit_data, 1:2) ## fruit colour ## 1 apples green ## 2 bananas yellow ## 3 oranges orange ## 4 apples red 3.4.2 group_by(), tally(), summarise() The next group of functions group things together and count them. Sounds boring but you would be amazed by how much of data science just seems to be doing those two things in various combinations. group_by() puts rows with the same value in a column of your dataframe into a group. Once they’re in a group, you can count them or summarise them by another variable. First you need to create a new dataframe with the grouped fruit. grouped_fruit = group_by(fruit_data, fruit) Next we use tally(). This counts all the instances of each fruit group. tally(grouped_fruit) ## # A tibble: 3 × 2 ## fruit n ## &lt;chr&gt; &lt;int&gt; ## 1 apples 2 ## 2 bananas 1 ## 3 oranges 1 See? Now the apples are grouped together rather than being two separate rows, and there’s a new column called n, which contains the result of the count. If we specify that we want to count by something else, we can add that in as a ‘weight’, by adding wt = as an argument in the function. tally(grouped_fruit, wt = amount) ## # A tibble: 3 × 2 ## fruit n ## &lt;chr&gt; &lt;dbl&gt; ## 1 apples 10 ## 2 bananas 5 ## 3 oranges 10 That counts the amounts of each fruit, ignoring the colour. 3.4.3 filter() Another quite obviously useful function. This filters the dataframe based on a condition which you set within the function. The first argument is the data to be filtered. The second is a condition (or multiple condition). The function will return every row where that condition is true. Just red fruit: filter(fruit_data, colour == &#39;red&#39;) ## fruit colour amount ## 1 apples red 8 Just fruit with at least 5 pieces: filter(fruit_data, amount &gt;=5) ## fruit colour amount ## 1 bananas yellow 5 ## 2 oranges orange 10 ## 3 apples red 8 3.4.4 sort(), arrange(), top_n() Another useful set of functions, often you want to sort things. The function arrange() does this very nicely. You specify the data frame, and the variable you would like to sort by. arrange(fruit_data, amount) ## fruit colour amount ## 1 apples green 2 ## 2 bananas yellow 5 ## 3 apples red 8 ## 4 oranges orange 10 Sorting is ascending by default, but you can specify descending using desc(): arrange(fruit_data, desc(amount)) ## fruit colour amount ## 1 oranges orange 10 ## 2 apples red 8 ## 3 bananas yellow 5 ## 4 apples green 2 If you `sortarrange() by a list of characters, you’ll get alphabetical order: arrange(fruit_data, fruit) ## fruit colour amount ## 1 apples green 2 ## 2 apples red 8 ## 3 bananas yellow 5 ## 4 oranges orange 10 You can sort by multiple things: arrange(fruit_data, fruit, desc(amount)) ## fruit colour amount ## 1 apples red 8 ## 2 apples green 2 ## 3 bananas yellow 5 ## 4 oranges orange 10 Notice that now red apples are first. 3.4.5 left_join(), inner_join(), anti_join() Another set of commands we’ll use quite often in this course are the join() ‘family’. Joins are a very powerful but simple way of selecting certain subsets of data, and adding information from multiple tables together. Let’s make a second table of information giving the delivery day for each fruit type: fruit_type = c(&#39;apples&#39;, &#39;bananas&#39;,&#39;oranges&#39;) weekday = c(&#39;Monday&#39;, &#39;Wednesday&#39;, &#39;Friday&#39;) fruit_days = data.frame(fruit_type, weekday, stringsAsFactors = FALSE) fruit_days ## fruit_type weekday ## 1 apples Monday ## 2 bananas Wednesday ## 3 oranges Friday This can be ‘joined’ to the fruit information, to add the new data on the delivery day, without having to edit the original table (or repeat the information for apples twice). This is done using left_join. Joins need a common key, a column which allows the join to match the data tables up. It’s important that these are unique (a person’s name makes a bad key by itself, for example, because it’s likely more than one person will share the same name). Usually, we use codes as the join keys. If the columns containing the join keys have different names (as ours do), specify them using the syntax below: joined_fruit = fruit_data %&gt;% left_join(fruit_days, by = c(&quot;fruit&quot; = &quot;fruit_type&quot;)) joined_fruit ## fruit colour amount weekday ## 1 apples green 2 Monday ## 2 bananas yellow 5 Wednesday ## 3 oranges orange 10 Friday ## 4 apples red 8 Monday In this new dataframe, the correct weekday is now listed beside the relevant fruit type. 3.4.6 Piping Another useful feature of the tidyverse is that you can ‘pipe’ commands through a bunch of functions, making it easier to follow the logical order of the code. This means that you can do one operation, and pass the result to another operation. The previous dataframe is passed as the first argument of the next function by using the pipe %&gt;% command. It works like this: fruit_data %&gt;% filter(colour != &#39;yellow&#39;) %&gt;% # remove any yellow colour fruit group_by(fruit) %&gt;% # group the fruit by type tally(amount) %&gt;% # count each group arrange(desc(n)) # arrange in descending order of the count ## # A tibble: 2 × 2 ## fruit n ## &lt;chr&gt; &lt;dbl&gt; ## 1 apples 10 ## 2 oranges 10 That code block, written in prose: “take fruit data, remove any yellow colour fruit, count the fruits by type and amount, and arrange in descending order of the total” 3.4.7 Plotting using ggplot() The tidyverse includes a pretty great plotting library called ggplot2. This can be used by piping your dataframe to a function called ggplot(). The basic idea is that you add your data, then you can add plot elements which are called geoms. Some common ones are geom_line(), geom_bar() and geom_point(). To the geom function you add aesthetics, which is basically telling the function which bits of your data should be responsible for which parts of the visualisation. These are added using aes(). I’ll explain a bit more about some of these aesthetics as I go along. As an example: Bar chart of different types of fruit (one each of bananas and oranges, two types of apple) fruit_data %&gt;% ggplot() + geom_bar(aes(x = fruit)) Counting the total amount of fruit: fruit_data %&gt;% ggplot() + geom_bar(aes(x = fruit, weight = amount)) Charting amounts and fruit colours: fruit_data %&gt;% ggplot() + geom_bar(aes(x = fruit, weight = amount, fill = colour)) And just because it annoys me having random colours, we can map them to the actual colours: fruit_data %&gt;% ggplot() + geom_bar(aes(x = fruit, weight = amount, fill = colour)) + scale_fill_manual(values = c(&quot;orange&quot; = &quot;orange&quot;, &quot;green&quot; = &quot;#8db600&quot;, &quot;red&quot; = &quot;#ff0800&quot;, &quot;yellow&quot; = &quot;#ffe135&quot;)) 3.5 Exercise for this week So that’s a very quick introduction to R. There’s loads of places to learn more. R-studio cheat sheets The Pirate’s Guide to R, a good beginners guide to base R R for data science, which teaches the tidyverse in detail Learn how to make a book like this using Bookdown "],["week-2-class-1-acquiring-and-working-with-network-data.html", "Chapter 4 Week 2, Class 1: Acquiring and Working With Network Data", " Chapter 4 Week 2, Class 1: Acquiring and Working With Network Data This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-2-class-2-data-cleaning.html", "Chapter 5 Week 2, Class 2: Data Cleaning", " Chapter 5 Week 2, Class 2: Data Cleaning This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-3-class-1-data-modelling.html", "Chapter 6 Week 3, Class 1: Data modelling", " Chapter 6 Week 3, Class 1: Data modelling This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-3-class-2-build-a-data-model-with-r.html", "Chapter 7 Week 3, Class 2: Build a Data Model with R", " Chapter 7 Week 3, Class 2: Build a Data Model with R This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-4-class-1-network-basics.html", "Chapter 8 Week 4, Class 1: Network Basics", " Chapter 8 Week 4, Class 1: Network Basics This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-4-class-2-network-analysis-with-r.html", "Chapter 9 Week 4, Class 2: Network Analysis with R” 9.1 Introduction 9.2 Constructing a Network in R 9.3 Exercises:", " Chapter 9 Week 4, Class 2: Network Analysis with R” 9.1 Introduction A good place to start to learn R is the free book https://r4ds.had.co.nz/index.html, and if you want to learn how to use R for text mining specifically, https://www.tidytextmining.com/ is an excellent (also free) online book. This document you’re reading is called an R Notebook: it’s a special document which contains text and code. Anything within the gray block below is called a ‘chunk’. On the right-hand side you’ll see a little green triangle. Clicking that will run all the code in the chunk. 1 + 1 is very simple computer code which adds those two numbers together. Try clicking on the code. 1+1 ## [1] 2 R runs the code, and displays the output underneath the chunk. This MyBinder R environment has loaded an individual ‘container’ for you to try out the code. Feel free to edit or add new code: no changes will be saved once we finish the session. 9.2 Constructing a Network in R One of the easiest data formats to construct a network is an edge list: a simple dataframe with two columns, representing the connections between two nodes, one per row. It makes particular sense with correspondence data, which is often stored as a table of letters with a ‘from’ and a ‘to’—more or less a ready-made edge list. In a correspondence dataset you might also have multiple sets of each of the edges (multiple letters between the same pair of individuals). You can add this to the edge list as an attribute called weight, which is simply another column. I use three R network libraries to do almost everything network-related, from analysis to visualisation: igraph, tidygraph and ggraph. My goal is to port everything to a format which is really easy to work with using existing my data analysis workflow. That format is known as ‘tidy data’, and it is a way of working with data which is easily transferable across a range of uses. It also means you need to learn very little new programming to do network analysis if you stay within this ‘ecosystem’. 9.2.1 Import Network Data with the Tidyverse The whole workflow uses four packages. The first is tidyverse, a collection of various packages used for data wrangling and analytics. library(dplyr) library(magrittr) library(readr) library(stringr) Next I need some network data. On the project this is generally a comma separated values file containing the information for one letter per row. We turn the raw letter data into an edge list in a standardised format, with the from/to information, a letter date, a place, and a unique identifier for the letter. Because the dataset is large and the same names are often used repeatedly, we use a unique ID number rather than people or place names when constructing the edge list. The nice thing about working within the tidyverse is that it’s easy to then match the IDs back to actual names afterwards. These edge lists can be turned into a network object using tidygraph and the function as_tbl_graph. This function takes the first two columns in a dataset and turns them into the network graph, using any additional columns as attributes. We use two separate tables of data. First, an edge list, using unique, unambiguous numeric IDs for people and place names. Next, additional lookup tables, just with the unique ID, the person’s name, and additional information, if you have it (which can be used to filter the network afterwards). First load the two tables into R (I’ve created small sample tables to work with), which are available here and here: letters = read_csv(&quot;https://raw.githubusercontent.com/yann-ryan/dh_intro_gates/main/sample_letter_data_network.csv&quot;, col_types = cols(.default = &quot;c&quot;)) If you have multiple letters between individuals, you can sum them and use as a weight in the network, or you can ignore it. You can do this with tidyverse commands: group_by() and tally(), changing the name of the new column to ‘weight’. edge_list = letters %&gt;% group_by(author, recipient) %&gt;% tally(name = &#39;weight&#39;) 9.2.2 Turn the edge list into a tbl_graph Next transform the edge list into a network object called a tbl_graph, using tidygraph. A tbl_graph is a graph object which can be manipulated using tidyverse grammar. This means you can create a network and then use a range of standard data analysis functions on it as needed, without learning a whole new set of commands. First, load the tidygraph library. Use as_tbl_graph() to turn the edge list into a network. The first two columns will be taken as the from and to data, and any additional columns added as attributes. It’ll automatically create a nodes table, too. library(tidygraph) sample_tbl_graph = edge_list %&gt;% as_tbl_graph() sample_tbl_graph ## # A tbl_graph: 417 nodes and 479 edges ## # ## # A directed acyclic simple graph with 1 component ## # ## # Node Data: 417 × 1 (active) ## name ## &lt;chr&gt; ## 1 Agnes Austin ## 2 Alice Thurrgood ## 3 Amye Champernowne ## 4 Ane Carnsew ## 5 Arthur Remys ## 6 Arthur Strode ## # … with 411 more rows ## # ## # Edge Data: 479 × 3 ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 124 1 ## 2 2 117 1 ## 3 3 100 1 ## # … with 476 more rows The tbl_graph is an object with two tables, one for the edges and one for the nodes. You can access each of the tables using the function activate(nodes) or activate(edges). The active table has (active) after it. sample_tbl_graph = sample_tbl_graph %&gt;% activate(edges) sample_tbl_graph ## # A tbl_graph: 417 nodes and 479 edges ## # ## # A directed acyclic simple graph with 1 component ## # ## # Edge Data: 479 × 3 (active) ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 124 1 ## 2 2 117 1 ## 3 3 100 1 ## 4 4 81 1 ## 5 5 125 1 ## 6 5 113 1 ## # … with 473 more rows ## # ## # Node Data: 417 × 1 ## name ## &lt;chr&gt; ## 1 Agnes Austin ## 2 Alice Thurrgood ## 3 Amye Champernowne ## # … with 414 more rows Tidygraph allows you to perform calculations on the tbl_graph using mutate, using standard igraph algorithms. So for example to calculate the degree of every node: sample_tbl_graph %&gt;% activate(nodes) %&gt;% mutate(degree = centrality_degree(mode = &#39;total&#39;)) ## # A tbl_graph: 417 nodes and 479 edges ## # ## # A directed acyclic simple graph with 1 component ## # ## # Node Data: 417 × 2 (active) ## name degree ## &lt;chr&gt; &lt;dbl&gt; ## 1 Agnes Austin 2 ## 2 Alice Thurrgood 1 ## 3 Amye Champernowne 1 ## 4 Ane Carnsew 1 ## 5 Arthur Remys 3 ## 6 Arthur Strode 2 ## # … with 411 more rows ## # ## # Edge Data: 479 × 3 ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 124 1 ## 2 2 117 1 ## 3 3 100 1 ## # … with 476 more rows If you run standard functions meant to be used on a dataframe, they will happen to the active table. So if you wanted to filter just edges from ID 1, for example, you could use the filter verb from dplyr: sample_tbl_graph %&gt;% filter(from ==1) ## # A tbl_graph: 417 nodes and 1 edges ## # ## # A rooted forest with 416 trees ## # ## # Edge Data: 1 × 3 (active) ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 124 1 ## # ## # Node Data: 417 × 1 ## name ## &lt;chr&gt; ## 1 Agnes Austin ## 2 Alice Thurrgood ## 3 Amye Champernowne ## # … with 414 more rows Maybe you only want to keep nodes with the title ‘Sir’? Activate the nodes again with activate(nodes), join the people table, then use filter and str_detect to filter based on a regular expressions pattern. You’ll see that it has filtered out unused edges now, too: sample_tbl_graph %&gt;% activate(nodes)%&gt;% filter(str_detect(name, &quot;(?i)sir&quot;)) ## # A tbl_graph: 14 nodes and 4 edges ## # ## # A rooted forest with 10 trees ## # ## # Node Data: 14 × 1 (active) ## name ## &lt;chr&gt; ## 1 Sir Faithful Fortescue ## 2 Sir Phelim O&amp;#x0027;Neill ## 3 Sir Richard ## 4 Sir Richard Carnsew ## 5 Sir Lucas Dillon ## 6 Sir Luke Fitzgerald ## # … with 8 more rows ## # ## # Edge Data: 4 × 3 ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 10 1 ## 2 1 11 1 ## 3 3 9 1 ## # … with 1 more row Slightly more useful might be to filter based on some calculation you’ve made previously. The data format allows you to use dplyr pipes (%&gt;%) to perform one calculation on the data, then pass that new dataframe along to the next function. It works really well with tidygraph. Here we calculate the degree scores first, then filter to include only nodes with a degree score over two: sample_tbl_graph %&gt;% activate(nodes) %&gt;% mutate(degree = centrality_degree(mode = &#39;total&#39;)) %&gt;% filter(degree &gt;2) ## # A tbl_graph: 48 nodes and 76 edges ## # ## # A directed acyclic simple graph with 5 components ## # ## # Node Data: 48 × 2 (active) ## name degree ## &lt;chr&gt; &lt;dbl&gt; ## 1 Arthur Remys 3 ## 2 Capt. Nicholas Burton 3 ## 3 Captain Brandon Cusacke 4 ## 4 Christopher Creed 3 ## 5 Commissioners of the Supreme Council of the Confederate Catholics 10 ## 6 Committee for Public Revenue 3 ## # … with 42 more rows ## # ## # Edge Data: 76 × 3 ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 36 1 ## 2 1 37 1 ## 3 2 33 1 ## # … with 73 more rows 9.3 Exercises: Load in the network you created the previous week. Create a code chunk below to find the node with the highest degree in your network "],["week-5-class-1-visualising-networks-with-ggraph.html", "Chapter 10 Week 5, Class 1: Visualising Networks with ggraph 10.1 Visualising further information (using extra information with joins)", " Chapter 10 Week 5, Class 1: Visualising Networks with ggraph 10.0.1 Visualisation with ggraph The last step in the workflow is visualising the network. You can use igraph and standard R plotting libraries for this, but I use a package called ggraph, which uses the same language as ggplot (a very well-known visualisation library for R) and adds some special functions to visualise networks. To create a network diagram, first use the function ggraph on your tbl_graph, then add the special ggraph geoms geom_node_point() and geom_edge_link() library(tidygraph) library(tidyverse) library(ggraph) letters = read_csv(&quot;https://raw.githubusercontent.com/yann-ryan/dh_intro_gates/main/sample_letter_data_network.csv&quot;, col_types = cols(.default = &quot;c&quot;)) edge_list = letters %&gt;% group_by(author, recipient) %&gt;% tally(name = &#39;weight&#39;) sample_tbl_graph = edge_list %&gt;% as_tbl_graph() sample_tbl_graph ## # A tbl_graph: 417 nodes and 479 edges ## # ## # A directed acyclic simple graph with 1 component ## # ## # Node Data: 417 × 1 (active) ## name ## &lt;chr&gt; ## 1 Agnes Austin ## 2 Alice Thurrgood ## 3 Amye Champernowne ## 4 Ane Carnsew ## 5 Arthur Remys ## 6 Arthur Strode ## # … with 411 more rows ## # ## # Edge Data: 479 × 3 ## from to weight ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 124 1 ## 2 2 117 1 ## 3 3 100 1 ## # … with 476 more rows sample_tbl_graph %&gt;% ggraph(&#39;nicely&#39;) + geom_node_point() + geom_edge_link() You can use the dplyr pipes to perform calculations, filter the data and then visualise it, all in one go: sample_tbl_graph %&gt;% activate(nodes)%&gt;% mutate(degree = centrality_degree(mode = &#39;total&#39;)) %&gt;% filter(degree &gt;2) %&gt;% ggraph(&#39;nicely&#39;) + geom_node_point() + geom_edge_link() geom_node_point() and geom_edge_link take aesthetics, just like regular ggplot geoms. You can calculate degree scores and then set the size of the nodes to the result: sample_tbl_graph %&gt;% activate(nodes)%&gt;% mutate(degree = centrality_degree(mode = &#39;total&#39;)) %&gt;% ggraph(&#39;nicely&#39;) + geom_node_point(aes(size = degree)) + geom_edge_link() Add geom_node_text() to add text labels to your network. In a larger network, it can be helpful to only show labels belonging to the most-connected nodes. First, join the people table to the nodes table, then use ggraph, setting the label aesthetic. Another dplyr verb, if_else allows you to add conditions to the label command. Here, I’ve used if_else to return the label if the node’s degree score is more than 10: sample_tbl_graph %&gt;% activate(nodes)%&gt;% mutate(degree = centrality_degree(mode = &#39;total&#39;)) %&gt;% ggraph(&#39;nicely&#39;) + geom_node_point(aes(size = degree)) + geom_node_text(aes(label = if_else(degree &gt;10, name, NULL), size = degree), repel = TRUE) + geom_edge_link(alpha = .2) ## Warning: Removed 406 rows containing missing values (geom_text_repel). 10.1 Visualising further information (using extra information with joins) "],["week-5-class-2-visualising-with-gephi.html", "Chapter 11 Week 5, class 2: Visualising with Gephi", " Chapter 11 Week 5, class 2: Visualising with Gephi This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-6-class-1-bipartite-networks.html", "Chapter 12 Week 6, Class 1: Bipartite Networks", " Chapter 12 Week 6, Class 1: Bipartite Networks This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-6-class-2-literary-and-linguistic-networks.html", "Chapter 13 Week 6, Class 2: Literary and Linguistic Networks", " Chapter 13 Week 6, Class 2: Literary and Linguistic Networks This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["week-7-reflections.html", "Chapter 14 Week 7: Reflections", " Chapter 14 Week 7: Reflections This is an R Markdown Notebook. When you execute code within the notebook, the results appear beneath the code. Try executing this chunk by clicking the Run button within the chunk or by placing your cursor inside it and pressing Cmd+Shift+Enter. plot(cars) Add a new chunk by clicking the Insert Chunk button on the toolbar or by pressing Cmd+Option+I. When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the Preview button or press Cmd+Shift+K to preview the HTML file). The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike Knit, Preview does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
